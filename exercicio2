#include <stdio.h>
#include <stack>
#include <fstream>
#include <cstdlib>
#include <iostream>
#include <thread>
#include <chrono>
#include <vector>
#include <future>

bool exit_found = false;

// Matriz de char representnado o labirinto
char** maze; // Voce tambÃ©m pode representar o labirinto como um vetor de vetores de char (vector<vector<char>>)

// Numero de linhas e colunas do labirinto
int num_rows;
int num_cols;

// RepresentaÃ§Ã£o de uma posiÃ§Ã£o
struct pos_t {
	int i;
	int j;
};

// Estrutura de dados contendo as prÃ³ximas
// posicÃµes a serem exploradas no labirinto
std::stack<pos_t> valid_positions;
/* Inserir elemento: 

	 pos_t pos;
	 pos.i = 1;
	 pos.j = 3;
	 valid_positions.push(pos)
 */
// Retornar o numero de elementos: 
//    valid_positions.size();
// 
// Retornar o elemento no topo: 
//  valid_positions.top(); 
// 
// Remover o primeiro elemento do vetor: 
//    valid_positions.pop();


// FunÃ§Ã£o que le o labirinto de um arquivo texto, carrega em 
// memÃ³ria e retorna a posiÃ§Ã£o inicial
pos_t load_maze(const char* file_name) {
	pos_t initial_pos;
	// Abre o arquivo para leitura (fopen)
	FILE* file = fopen(file_name, "r");

	
	if (file == nullptr) {
		std::cout << "Erro ao abrir o arquivo!" << std::endl;
        	initial_pos.i = -1;
        	initial_pos.j = -1;
		return initial_pos;
	}
	// Le o numero de linhas e colunas (fscanf) 
	// e salva em num_rows e num_cols
	
	fscanf(file,"%d", &num_rows);
	fscanf(file,"%d", &num_cols);

	// Aloca a matriz maze (malloc)
	maze = (char**)malloc(num_rows*sizeof(char*));
	for (int i = 0; i < num_rows; ++i) {
		maze[i] = (char*)malloc(num_cols*sizeof(char));
		// Aloca cada linha da matriz
	}

	for (int i = 0; i < num_rows; ++i) {
		for (int j = 0; j < num_cols; ++j) {
			// Le o valor da linha i+1,j do arquivo e salva na posiÃ§Ã£o maze[i][j]
			// Se o valor for 'e' salvar o valor em initial_pos
			fscanf(file, " %c", &maze[i][j]);
			
			if (maze[i][j] == 'e') {
				initial_pos.i = i;
				initial_pos.j = j;				
			}
			
		}
	}
	fclose(file);
	return initial_pos;
}

// FunÃ§Ã£o que imprime o labirinto
void print_maze() {
	for (int i = 0; i < num_rows; ++i) {
		for (int j = 0; j < num_cols; ++j) {
			printf("%c", maze[i][j]);
		}
		printf("\n");
	}
}

void print_continuously() {
	while(!exit_found) {
		system("clear");
		print_maze();
		std::this_thread::sleep_for(std::chrono::milliseconds(100));	
	}
}


bool walk(pos_t pos) {
    if (exit_found) {
        return true;
    }

    int i = pos.i;
    int j = pos.j;

    if (maze[i][j] == 's') {
        exit_found = true;
        return true;
    }

    if (maze[i][j] != 'e') {
        maze[i][j] = '.';
        //print_maze();
        std::this_thread::sleep_for(std::chrono::milliseconds(300));
    }

    std::vector<std::thread> threads; // Vetor para armazenar as threads

    // Explora as posições válidas
    pos_t next_pos;
    if ( i < (num_rows - 1) && (maze[i + 1][j] == 'x' || maze[i+1][j] == 's')) {
        next_pos = { i + 1, j };
        std::thread t(walk, next_pos); // Cria um objeto thread temporário
		threads.push_back(std::move(t)); // Move o objeto temporário para o vetor
    }
    if (i > 0 && (maze[i - 1][j] == 'x' || maze[i-1][j] == 's') ) {
        next_pos = { i - 1, j };
        std::thread t(walk, next_pos); // Cria um objeto thread temporário
		threads.push_back(std::move(t)); // Move o objeto temporário para o vetor
    }
    if  (j < (num_cols - 1) && (maze[i][j + 1] == 'x' || maze[i][j+1] == 's') ) {
        next_pos = { i, j + 1 };
        std::thread t(walk, next_pos); // Cria um objeto thread temporário
		threads.push_back(std::move(t)); // Move o objeto temporário para o vetor
    }
    if (j > 0 && (maze[i][j - 1] == 'x'  ||  maze[i][j-1] == 's')) {
        next_pos = { i, j - 1 };
        std::thread t(walk, next_pos); // Cria um objeto thread temporário
		threads.push_back(std::move(t)); // Move o objeto temporário para o vetor
    }

    // Aguardar todas as threads filhas terminarem
    for (auto& t : threads) {
        if (t.joinable()) {
            t.join(); // Aguarda a thread terminar
        }
    }

    // Verifica se a saída foi encontrada
    return exit_found;
}


int main(int argc, char* argv[]) {
	// carregar o labirinto com o nome do arquivo recebido como argumento
	pos_t initial_pos = load_maze(argv[1]);
	
	std::thread imprimir(print_continuously); // abre uma thread para imprimir o labirinto
	

	// chamar a funÃ§Ã£o de navegaÃ§Ã£o
	bool exit_found = walk(initial_pos);
	
	
		// Tratar o retorno (imprimir mensagem)
	if(exit_found == true) {
		std::cout << "existe saida" << std::endl;
	}
	else{
		std::cout << "nao existe saida" << std::endl;
	}


	imprimir.join();
	return 0;

	
}
